<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FileNaming" xml:space="preserve">
    <value>Muster für Dateinamen</value>
  </data>
  <data name="FileNamingDescription" xml:space="preserve">
    <value>Dateinamen werden nach gewähltem Muster erzeugt. Platzhalter werden durch aktuelle Werte ersetzt.</value>
  </data>
  <data name="TitleNaming" xml:space="preserve">
    <value>Muster für Titel-Tag </value>
  </data>
  <data name="TitleNamingDescription" xml:space="preserve">
    <value>Tags für Titel jedes Stücks werden nach gewähltem Muster erzeugt. Platzhalter werden durch aktuelle Werte ersetzt.</value>
  </data>
  <data name="TrackNumbering" xml:space="preserve">
    <value>Nummerierung der Stücke</value>
  </data>
  <data name="TrackNumberingDescription" xml:space="preserve">
    <value>Nummerierung der einzelnen Stücke im Titel-Tag. Platzhalter werden durch aktuelle Werte ersetzt. Nur für Modus "Unterteile Kapitel".</value>
  </data>
  <data name="TotalTracks" xml:space="preserve">
    <value>Gesamtzahl Stücke hinzufügen</value>
  </data>
  <data name="TotalTracksDescription" xml:space="preserve">
    <value>Ergänzt die Nummerierung der Stücke um deren Gesamtzahl, wenn [ja].</value>
  </data>
  <data name="GenreNaming" xml:space="preserve">
    <value>Namensgebung Genre</value>
  </data>
  <data name="GenreNamingDescription" xml:space="preserve">
    <value>Namensquelle für das Genre-Tag. &lt;Quelle&gt;: aus aax-Datei; &lt;Standard&gt;: setzt zu 'Hörbuch'; &lt;Benutzerdefiniert&gt;: eigene Angabe.</value>
  </data>
  <data name="GenreName" xml:space="preserve">
    <value>Benutzerdefiniertes Genre</value>
  </data>
  <data name="GenreNameDescription" xml:space="preserve">
    <value>Benutzerdefiniertes Tag für das Genre</value>
  </data>
  <data name="ChapterNaming" xml:space="preserve">
    <value>Namensgebung Kapitelordner</value>
  </data>
  <data name="ChapterNamingDescription" xml:space="preserve">
    <value>Namensquelle für Kapitelordner, falls erforderlich und nicht unterbunden (keine Ordner). &lt;Quelle&gt;: aus aax-Datei; &lt;Standard&gt;: setzt zu 'Kapitel'; &lt;Benutzerdefiniert&gt;: eigene Angabe.</value>
  </data>
  <data name="ChapterName" xml:space="preserve">
    <value>Benutzerdefinierter Kapitelordner</value>
  </data>
  <data name="ChapterNameDescription" xml:space="preserve">
    <value>Benutzerdefinierter Präfix für "Kapitel"-Ordner.</value>
  </data>
  <data name="SeriesTitleLeft" xml:space="preserve">
    <value>Serientitel vor Doppelpunkt</value>
  </data>
  <data name="SeriesTitleLeftDescription" xml:space="preserve">
    <value>Für gekürzten Buchtitel, Serientitel wird entfernt: Titel der Serie steht vor Buchtitel, wenn [ja], sonst hinter Buchtitel, immer getrennt durch Doppelpunkt.</value>
  </data>
  <data name="LongBookTitle" xml:space="preserve">
    <value>Langer Buchtitel</value>
  </data>
  <data name="LongBookTitleDescription" xml:space="preserve">
    <value>Resultierender Buchtitel soll auch den Serientitel enthalten, wenn nicht [nein]. Reihenfolge wählbar, Buch- oder Serientitel zuerst. Sonst wird der Serientitel entfernt, ab/bis Doppelpunkt. [wie vorgefunden] übernimmt den ganzen Titel, ohne Untersuchung.</value>
  </data>
</root>